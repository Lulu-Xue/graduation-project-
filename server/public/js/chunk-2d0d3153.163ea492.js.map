{"version":3,"sources":["webpack:///./src/views/Visualization/vdog-sc.js"],"names":["CATEGORY_DIM_COUNT","GAP","BASE_LEFT","BASE_TOP","GRID_WIDTH","GRID_HEIGHT","CATEGORY_DIM","SYMBOL_SIZE","retrieveScatterData","data","dimX","dimY","result","i","length","item","push","generateGrids","option","schema","index","j","grid","left","top","width","height","brush","xAxisIndex","yAxisIndex","xAxis","splitNumber","position","axisLine","show","onZero","axisTick","inside","axisLabel","textStyle","color","textColor","splitLine","lineStyle","lineColor","type","gridIndex","scale","name","text","nameLocation","nameGap","nameTextStyle","yAxis","series","large","symbolSize","initPage","_x","_x2","_x3","_x4","_initPage","apply","this","arguments","_callee","NCBIData","myChart","oldNcList","NCBIValues","ncList","typeOn","regeneratorRuntime","wrap","_context","prev","next","randomList","readDataToMatrix","switchColumn","animationThreshold","backgroundColor","backColor","brushLink","throttleType","inBrush","opacity","outOfBrush","toolbox","showTitle","feature","saveAsImage","iconStyle","normal","borderColor","shadowColor","shadowBlur","visualMap","dimension","categories","inRange","outOfRange","controller","symbol","disableColor","orient","fontSize","colorRange","tooltip","trigger","formatter","obj","value","parallelAxis","dim","parallel","bottom","parallelAxisDefault","nameRotate","smooth","setOption","mtDNA","plDNA","cpDNA","Animals","Fungi","Plants","Protists","Other","abrupt","dispatchAction","selected","Plastid DNA","on","params","componentType","seriesType","window","open","brushSelected","batch","dataIndex","getOption","seriesIndex","len","join","stop","ncNumbers","re","Array","res","getNCBIValues","slice"],"mappings":"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","file":"js/chunk-2d0d3153.163ea492.js","sourcesContent":["import { getNCBIValues, randomList, switchColumn, colorRange, backColor, lineColor, textColor, disableColor } from \"./ncbi.js\"\r\n\r\nlet CATEGORY_DIM_COUNT = 8; // 平行坐标系坐标轴维度个数\r\nlet GAP = 1; // 网格图之间的间距\r\nlet BASE_LEFT = 5; // 网格图距左百分比\r\nlet BASE_TOP = 10; // 网格图距右百分比\r\nlet GRID_WIDTH = (100 - BASE_LEFT) / CATEGORY_DIM_COUNT - GAP - 1;\r\nlet GRID_HEIGHT = (100 - BASE_TOP) / CATEGORY_DIM_COUNT - GAP - 1;\r\nlet CATEGORY_DIM = 3; // 筛选的列\r\nlet SYMBOL_SIZE = 4;\r\n\r\nfunction retrieveScatterData(data, dimX, dimY) {\r\n    let result = [];\r\n    for (let i = 0; i < data.length; i++) {\r\n        let item = [data[i][dimX], data[i][dimY]];\r\n        item[2] = data[i][2];\r\n        item[CATEGORY_DIM + 1] = dimX;  // x\r\n        item[CATEGORY_DIM + 2] = dimY;  // y\r\n        item[CATEGORY_DIM + 3] = data[i][0];  //name\r\n        item[CATEGORY_DIM + 4] = data[i][4]; //NC\r\n        item[CATEGORY_DIM] = data[i][CATEGORY_DIM];  //type\r\n        result.push(item);\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction generateGrids(option, data, schema) {\r\n    let index = 0;\r\n\r\n    for (let i = 1; i < CATEGORY_DIM_COUNT; i++) {\r\n        for (let j = 0; j < CATEGORY_DIM_COUNT - 1; j++) {\r\n            if (CATEGORY_DIM_COUNT - i + j >= CATEGORY_DIM_COUNT) {\r\n                continue;\r\n            }\r\n\r\n            option.grid.push({\r\n                left: BASE_LEFT + i * (GRID_WIDTH + GAP) + '%',\r\n                top: BASE_TOP + j * (GRID_HEIGHT + GAP) + '%',\r\n                width: GRID_WIDTH + '%',\r\n                height: GRID_HEIGHT + '%'\r\n            });\r\n\r\n            //只能在单个坐标系中选择，不能跨坐标轴\r\n            option.brush.xAxisIndex && option.brush.xAxisIndex.push(index);\r\n            option.brush.yAxisIndex && option.brush.yAxisIndex.push(index);\r\n\r\n            option.xAxis.push({\r\n                splitNumber: 3,\r\n                position: 'top',\r\n                axisLine: {\r\n                    show: j === 0,\r\n                    onZero: false\r\n                },\r\n                axisTick: {\r\n                    show: j === 0,\r\n                    inside: true\r\n                },\r\n                axisLabel: {\r\n                    show: false,//j === 0,\r\n                    textStyle: {\r\n                        color: textColor\r\n                    }\r\n                },\r\n                splitLine: {\r\n                    show: true,\r\n                    lineStyle: {\r\n                        color: lineColor\r\n                    }\r\n                },\r\n                type: 'value',\r\n                gridIndex: index,\r\n                scale: true,\r\n                name: j === 0 ? schema[i + 6].text : \"\",\r\n                nameLocation: 'middle',\r\n                nameGap: 5,\r\n                nameTextStyle: {\r\n                    color: textColor\r\n                }\r\n            });\r\n\r\n            option.yAxis.push({\r\n                splitNumber: 3,\r\n                position: 'right',\r\n                axisLine: {\r\n                    show: i === CATEGORY_DIM_COUNT - 1,\r\n                    onZero: false\r\n                },\r\n                axisTick: {\r\n                    show: i === CATEGORY_DIM_COUNT - 1,\r\n                    inside: true\r\n                },\r\n                axisLabel: {\r\n                    show: false,//i === CATEGORY_DIM_COUNT - 1,\r\n                    textStyle: {\r\n                        color: textColor\r\n                    }\r\n                },\r\n                splitLine: {\r\n                    show: true,\r\n                    lineStyle: {\r\n                        color: lineColor\r\n                    }\r\n                },\r\n                type: 'value',\r\n                gridIndex: index,\r\n                scale: true,\r\n                name: i === CATEGORY_DIM_COUNT - 1 ? schema[j + 6].text : \"\",\r\n                nameLocation: 'middle',\r\n                nameTextStyle: {\r\n                    color: textColor\r\n                }\r\n            });\r\n\r\n            option.series.push({\r\n                type: 'scatter',\r\n                large: true,\r\n                symbolSize: SYMBOL_SIZE,\r\n                xAxisIndex: index,\r\n                yAxisIndex: index,\r\n                data: retrieveScatterData(data, i + 6, j + 6)\r\n            });\r\n\r\n            //option.visualMap.seriesIndex.push(option.series.length - 1); //all\r\n\r\n            index++;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport async function initPage(NCBIData, myChart, oldNcList, NCBIValues) {\r\n    let ncList = oldNcList;\r\n    if (!oldNcList) ncList = randomList(NCBIData, 200);\r\n    let data = readDataToMatrix(NCBIData, ncList, NCBIValues);\r\n\r\n    switchColumn(data, 1, 2); // Group\r\n    let schema = [\r\n        { name: 'name', index: 0, text: 'Organism/Name' },\r\n        { name: 'SubGroup', index: 1, text: 'SubGroup' },\r\n        { name: 'Group', index: 2, text: 'Group' },\r\n        { name: 'Type', index: 3, text: 'Type' },\r\n        { name: 'RefSeq', index: 4, text: 'RefSeq' },\r\n        { name: 'INSDC', index: 5, text: 'INSDC' },\r\n        { name: 'Size', index: 6, text: 'Size (Kb)' },\r\n        { name: 'GC', index: 7, text: 'GC%' },\r\n        { name: 'Protein', index: 8, text: 'Protein' },\r\n        { name: 'rRNA', index: 9, text: 'rRNA' },\r\n        { name: 'tRNA', index: 10, text: 'tRNA' },\r\n        { name: 'oRNA', index: 11, text: 'Other RNA' },\r\n        { name: 'Gene', index: 12, text: 'Gene' },\r\n        { name: 'Pseudogene', index: 13, text: 'Pseudogene' },\r\n        { name: 'RDate', index: 14, text: 'Release Date' },\r\n        { name: 'MDate', index: 15, text: 'Modify Date' }\r\n    ];\r\n\r\n    let option = {\r\n        animationThreshold: 100,\r\n        backgroundColor: backColor,\r\n        brush: {\r\n            brushLink: 'all',\r\n            throttleType: 'debounce',\r\n            xAxisIndex: [],\r\n            yAxisIndex: [],\r\n            inBrush: {\r\n                opacity: 1\r\n            },\r\n            outOfBrush: {\r\n                opacity: 0.2\r\n            }\r\n        },\r\n        toolbox: {\r\n            showTitle: false,\r\n            feature: {\r\n                saveAsImage: {}\r\n            },\r\n            iconStyle: {\r\n                normal: {\r\n                    borderColor: textColor,\r\n                    shadowColor: 'rgba(0, 0, 0, 0.5)',\r\n                    shadowBlur: 10\r\n                }\r\n            }\r\n        },\r\n        visualMap: [{\r\n            type: 'piecewise',\r\n            top: 20,\r\n            left: 0,\r\n            dimension: 2,\r\n            categories: ['Animals', 'Fungi', 'Plants', 'Protists', 'Other'],\r\n            textStyle: {\r\n                color: textColor\r\n            },\r\n            inRange: {\r\n            },\r\n            outOfRange: {\r\n                color: ['rgba(255,255,255,.05)', 'rgba(255,255,255,.05)', 'rgba(255,255,255,.05)', 'rgba(255,255,255,.05)', 'rgba(255,255,255,.05)']\r\n            },\r\n            controller: {\r\n                inRange: {\r\n                    symbol: \"path://M512 976.7424c-256.67072 0-464.7424-208.07168-464.7424-464.73728C47.2576 255.32928 255.32928 47.2576 512 47.2576s464.7424 208.07168 464.7424 464.7424c0 256.67072-208.07168 464.7424-464.7424 464.7424z m225.41312-754.26816c-161.65888 106.2144-264.18176 424.86272-264.18176 424.86272L410.14272 490.54208l-130.11968 101.16096c55.20896 25.28768 134.0672 106.2144 201.09312 212.4288 47.31392-111.26784 193.20832-338.87744 264.18176-359.11168-27.5968-80.9216-11.82208-146.67776-7.8848-222.54592z m0 0\",\r\n                    color: '#ffffff'\r\n                },\r\n                outOfRange: {\r\n                    color: disableColor\r\n                }\r\n            }\r\n        }, {\r\n            type: 'piecewise',\r\n            categories: [\"mtDNA\", \"Plastid DNA\", \"cpDNA\"],\r\n            dimension: CATEGORY_DIM,\r\n            orient: 'horizontal',\r\n            top: 0,\r\n            left: 'center',\r\n            textStyle: {\r\n                color: textColor,\r\n                fontSize: 16\r\n            },\r\n            inRange: {\r\n                color: colorRange,\r\n            },\r\n            outOfRange: {\r\n                color: disableColor,\r\n            },\r\n            controller: {\r\n                inRange: {\r\n                    symbol: 'circle'\r\n                },\r\n                outOfRange: {\r\n                    symbol: 'circle'\r\n                }\r\n            },\r\n            //seriesIndex: [0] // all\r\n        }],\r\n        tooltip: {\r\n            trigger: 'item',\r\n            formatter: function (obj) {\r\n                let value = obj.value;\r\n                return '<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 18px;padding-bottom: 7px;margin-bottom: 7px\">'\r\n                    + value[CATEGORY_DIM] + ': ' + value[CATEGORY_DIM + 3] + '(' + value[CATEGORY_DIM + 4] + ')'\r\n                    + '</div>'\r\n                    + 'X (' + schema[value[CATEGORY_DIM + 1]].text + ') ：' + value[0] + '<br>'\r\n                    + 'Y (' + schema[value[CATEGORY_DIM + 2]].text + ') ：' + value[1] + '<br>'\r\n                    + schema[2].text + ' ：' + value[2] + '<br>';\r\n            }\r\n        },\r\n        parallelAxis: [\r\n            { dim: 6, name: schema[6].text },\r\n            { dim: 7, name: schema[7].text },\r\n            { dim: 8, name: schema[8].text },\r\n            { dim: 9, name: schema[9].text },\r\n            { dim: 10, name: schema[10].text },\r\n            { dim: 11, name: schema[11].text },\r\n            { dim: 12, name: schema[12].text },\r\n            { dim: 13, name: schema[13].text }\r\n        ],\r\n        parallel: {\r\n            bottom: '5%',\r\n            left: '5%',\r\n            height: '33%',\r\n            width: '50%',\r\n            parallelAxisDefault: {\r\n                type: 'value',\r\n                nameLocation: 'end',\r\n                nameRotate: -30,\r\n                splitNumber: 3,\r\n                nameTextStyle: {\r\n                    fontSize: 14\r\n                },\r\n                axisLine: {\r\n                    lineStyle: {\r\n                        color: lineColor\r\n                    }\r\n                },\r\n                axisTick: {\r\n                    lineStyle: {\r\n                        color: lineColor\r\n                    }\r\n                },\r\n                axisLabel: {\r\n                    textStyle: {\r\n                        color: textColor\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        grid: [],\r\n        xAxis: [],\r\n        yAxis: [],\r\n        series: [\r\n            {\r\n                name: 'parallel',\r\n                type: 'parallel',\r\n                data: data,\r\n                smooth: true,\r\n                lineStyle: {\r\n                    normal: {\r\n                        width: 0.2,\r\n                        opacity: 0.3\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n\r\n    generateGrids(option, data, schema);\r\n    myChart.setOption(option);\r\n\r\n    let typeOn = {\r\n        mtDNA: false,\r\n        plDNA: false,\r\n        cpDNA: false,\r\n        Animals: false,\r\n        Fungi: false,\r\n        Plants: false,\r\n        Protists: false,\r\n        Other: false\r\n    };\r\n    for (let i = 0; i < data.length; i++) {\r\n        if (data[i][CATEGORY_DIM] === \"mtDNA\") typeOn.mtDNA = true;\r\n        if (data[i][CATEGORY_DIM] === \"Plastid DNA\") typeOn.plDNA = true;\r\n        if (data[i][CATEGORY_DIM] === \"cpDNA\") typeOn.cpDNA = true;\r\n        if (data[i][2] === \"Animals\") typeOn.Animals = true;\r\n        if (data[i][2] === \"Fungi\") typeOn.Fungi = true;\r\n        if (data[i][2] === \"Plants\") typeOn.Plants = true;\r\n        if (data[i][2] === \"Protists\") typeOn.Protists = true;\r\n        if (data[i][2] === \"Other\") typeOn.Other = true;\r\n        if (typeOn.mtDNA === true && typeOn.plDNA === true && typeOn.cpDNA === true && typeOn.Animals === true && typeOn.Fungi === true && typeOn.Plants === true && typeOn.Protists === true && typeOn.Other === true) {\r\n            break;\r\n        }\r\n    }\r\n    myChart.dispatchAction({\r\n        type: 'selectDataRange',\r\n        selected: {\r\n            'mtDNA': typeOn.mtDNA,\r\n            'Plastid DNA': typeOn.plDNA,\r\n            'cpDNA': typeOn.cpDNA,\r\n            'Animals': typeOn.Animals,\r\n            'Fungi': typeOn.Fungi,\r\n            'Plants': typeOn.Plants,\r\n            'Protists': typeOn.Protists,\r\n            'Other': typeOn.Other\r\n        }\r\n    });\r\n\r\n    myChart.on('click', function (params) {\r\n        if (params.componentType === 'series') {\r\n            if (params.seriesType === 'scatter') {\r\n                // let type = \"\";\r\n                // switch (params.data[CATEGORY_DIM]) {\r\n                //     case \"mtDNA\":\r\n                //         type = \"mtDNA\"; break;\r\n                //     case \"Plastid DNA\":\r\n                //         type = \"plDNA\"; break;\r\n                //     case \"cpDNA\":\r\n                //         type = \"cpDNA\"; break;\r\n                // }\r\n                if (params.data[7] != '-') {\r\n                    window.open(\"http://bio.njfu.edu.cn/CPTree/service/cpdata.php?type=vdog&id=\" + params.data[7]);\r\n                }\r\n            }\r\n        }\r\n    });\r\n    myChart.on('brushselected', function (params) {\r\n        let brushSelected = params.batch[0].selected[0];\r\n        if (brushSelected.dataIndex.length > 0) {\r\n            let data = myChart.getOption().series[brushSelected.seriesIndex].data;\r\n            let typeOn = {\r\n                mtDNA: false,\r\n                plDNA: false,\r\n                cpDNA: false,\r\n                Animals: false,\r\n                Fungi: false,\r\n                Plants: false,\r\n                Protists: false,\r\n                Other: false\r\n            };\r\n            for (let i = 0, len = brushSelected.dataIndex.length; i < len; i++) {\r\n                if (data[brushSelected.dataIndex[i]][CATEGORY_DIM] === \"mtDNA\") typeOn.mtDNA = true;\r\n                if (data[brushSelected.dataIndex[i]][CATEGORY_DIM] === \"Plastid DNA\") typeOn.plDNA = true;\r\n                if (data[brushSelected.dataIndex[i]][CATEGORY_DIM] === \"cpDNA\") typeOn.cpDNA = true;\r\n                if (data[brushSelected.dataIndex[i]][2] === \"Animals\") typeOn.Animals = true;\r\n                if (data[brushSelected.dataIndex[i]][2] === \"Fungi\") typeOn.Fungi = true;\r\n                if (data[brushSelected.dataIndex[i]][2] === \"Plants\") typeOn.Plants = true;\r\n                if (data[brushSelected.dataIndex[i]][2] === \"Protists\") typeOn.Protists = true;\r\n                if (data[brushSelected.dataIndex[i]][2] === \"Other\") typeOn.Other = true;\r\n                if (typeOn.mtDNA === true && typeOn.plDNA === true && typeOn.cpDNA === true && typeOn.Animals === true && typeOn.Fungi === true && typeOn.Plants === true && typeOn.Protists === true && typeOn.Other === true) {\r\n                    break;\r\n                }\r\n            }\r\n            myChart.dispatchAction({\r\n                type: 'selectDataRange',\r\n                selected: {\r\n                    'mtDNA': typeOn.mtDNA,\r\n                    'Plastid DNA': typeOn.plDNA,\r\n                    'cpDNA': typeOn.cpDNA,\r\n                    'Animals': typeOn.Animals,\r\n                    'Fungi': typeOn.Fungi,\r\n                    'Plants': typeOn.Plants,\r\n                    'Protists': typeOn.Protists,\r\n                    'Other': typeOn.Other\r\n                }\r\n            });\r\n        }\r\n    });\r\n    if (!oldNcList) return ncList.join(\",\");\r\n}\r\n\r\nfunction readDataToMatrix(NCBIData, ncNumbers, NCBIValues) {\r\n    let re = new Array();\r\n    let res = NCBIValues ? NCBIValues : getNCBIValues(NCBIData, ncNumbers);\r\n    for (let i = 0, len = res.length; i < len; i++) {\r\n        re.push(res[i].slice());//二维数组深拷贝\r\n    }\r\n    return re;\r\n}"],"sourceRoot":""}