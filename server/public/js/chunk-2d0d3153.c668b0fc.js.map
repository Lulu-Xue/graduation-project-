{"version":3,"sources":["webpack:///./src/views/Visualization/vdog-sc.js"],"names":["CATEGORY_DIM_COUNT","GAP","BASE_LEFT","BASE_TOP","GRID_WIDTH","GRID_HEIGHT","CATEGORY_DIM","SYMBOL_SIZE","retrieveScatterData","data","dimX","dimY","result","i","length","item","push","generateGrids","option","schema","index","j","grid","left","top","width","height","brush","xAxisIndex","yAxisIndex","xAxis","splitNumber","position","axisLine","show","onZero","axisTick","inside","axisLabel","textStyle","color","textColor","splitLine","lineStyle","lineColor","type","gridIndex","scale","name","text","nameLocation","nameGap","nameTextStyle","yAxis","series","symbolSize","initPage","_x","_x2","_x3","_x4","_initPage","apply","this","arguments","_callee","NCBIData","myChart","oldNcList","NCBIValues","ncList","typeOn","regeneratorRuntime","wrap","_context","prev","next","randomList","readDataToMatrix","switchColumn","backgroundColor","backColor","brushLink","throttleType","inBrush","opacity","outOfBrush","toolbox","showTitle","feature","saveAsImage","iconStyle","normal","borderColor","shadowColor","shadowBlur","visualMap","categories","dimension","orient","fontSize","inRange","colorRange","outOfRange","disableColor","controller","symbol","tooltip","trigger","formatter","obj","value","parallelAxis","dim","parallel","bottom","parallelAxisDefault","nameRotate","smooth","setOption","mtDNA","plDNA","cpDNA","Animals","Fungi","Plants","Protists","Other","abrupt","dispatchAction","selected","Plastid DNA","on","params","componentType","seriesType","window","open","brushSelected","batch","dataIndex","getOption","seriesIndex","len","join","stop","ncNumbers","res","getNCBIValues"],"mappings":"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","file":"js/chunk-2d0d3153.c668b0fc.js","sourcesContent":["import Vue from \"vue\"\nimport { getNCBIValues, randomList, switchColumn, colorRange, backColor, lineColor, textColor, disableColor } from \"./ncbi.js\"\n\nlet CATEGORY_DIM_COUNT = 8; // 平行坐标系坐标轴维度个数\nlet GAP = 1; // 网格图之间的间距\nlet BASE_LEFT = 5; // 网格图距左百分比\nlet BASE_TOP = 10; // 网格图距右百分比\nlet GRID_WIDTH = (100 - BASE_LEFT) / CATEGORY_DIM_COUNT - GAP - 1;\nlet GRID_HEIGHT = (100 - BASE_TOP) / CATEGORY_DIM_COUNT - GAP - 1;\nlet CATEGORY_DIM = 3; // 筛选的列\nlet SYMBOL_SIZE = 4;\n\nfunction retrieveScatterData(data, dimX, dimY) {\n    let result = [];\n    for (let i = 0; i < data.length; i++) {\n        let item = [data[i][dimX], data[i][dimY]];\n        item[2] = data[i][2];\n        item[CATEGORY_DIM + 1] = dimX;  // x\n        item[CATEGORY_DIM + 2] = dimY;  // y\n        item[CATEGORY_DIM + 3] = data[i][0];  //name\n        item[CATEGORY_DIM + 4] = data[i][4]; //NC\n        item[CATEGORY_DIM] = data[i][CATEGORY_DIM];  //type\n        result.push(item);\n    }\n    return result;\n}\n\nfunction generateGrids(option, data, schema) {\n    let index = 0;\n\n    for (let i = 1; i < CATEGORY_DIM_COUNT; i++) {\n        for (let j = 0; j < CATEGORY_DIM_COUNT - 1; j++) {\n            if (CATEGORY_DIM_COUNT - i + j >= CATEGORY_DIM_COUNT) {\n                continue;\n            }\n\n            option.grid.push({\n                left: BASE_LEFT + i * (GRID_WIDTH + GAP) + '%',\n                top: BASE_TOP + j * (GRID_HEIGHT + GAP) + '%',\n                width: GRID_WIDTH + '%',\n                height: GRID_HEIGHT + '%'\n            });\n\n            //只能在单个坐标系中选择，不能跨坐标轴\n            option.brush.xAxisIndex && option.brush.xAxisIndex.push(index);\n            option.brush.yAxisIndex && option.brush.yAxisIndex.push(index);\n\n            option.xAxis.push({\n                splitNumber: 3,\n                position: 'top',\n                axisLine: {\n                    show: j === 0,\n                    onZero: false\n                },\n                axisTick: {\n                    show: j === 0,\n                    inside: true\n                },\n                axisLabel: {\n                    show: false,//j === 0,\n                    textStyle: {\n                        color: textColor\n                    }\n                },\n                splitLine: {\n                    show: true,\n                    lineStyle: {\n                        color: lineColor\n                    }\n                },\n                type: 'value',\n                gridIndex: index,\n                scale: true,\n                name: j === 0 ? schema[i + 6].text : \"\",\n                nameLocation: 'middle',\n                nameGap: 5,\n                nameTextStyle: {\n                    color: textColor\n                }\n            });\n\n            option.yAxis.push({\n                splitNumber: 3,\n                position: 'right',\n                axisLine: {\n                    show: i === CATEGORY_DIM_COUNT - 1,\n                    onZero: false\n                },\n                axisTick: {\n                    show: i === CATEGORY_DIM_COUNT - 1,\n                    inside: true\n                },\n                axisLabel: {\n                    show: false,//i === CATEGORY_DIM_COUNT - 1,\n                    textStyle: {\n                        color: textColor\n                    }\n                },\n                splitLine: {\n                    show: true,\n                    lineStyle: {\n                        color: lineColor\n                    }\n                },\n                type: 'value',\n                gridIndex: index,\n                scale: true,\n                name: i === CATEGORY_DIM_COUNT - 1 ? schema[j + 6].text : \"\",\n                nameLocation: 'middle',\n                nameTextStyle: {\n                    color: textColor\n                }\n            });\n\n            option.series.push({\n                type: 'scatter',\n                symbolSize: SYMBOL_SIZE,\n                xAxisIndex: index,\n                yAxisIndex: index,\n                data: retrieveScatterData(data, i + 6, j + 6)\n            });\n\n            //option.visualMap.seriesIndex.push(option.series.length - 1); //all\n\n            index++;\n        }\n    }\n}\n\n\n\nexport async function initPage(NCBIData, myChart, oldNcList, NCBIValues) {\n    let ncList = oldNcList;\n    if (!oldNcList) ncList = randomList(NCBIData, 200);\n    let data = NCBIValues ? NCBIValues : readDataToMatrix(NCBIData, ncList);\n\n    switchColumn(data, 1, 2); // Group\n\n    let schema = [\n        { name: 'name', index: 0, text: 'Organism/Name' },\n        { name: 'SubGroup', index: 1, text: 'SubGroup' },\n        { name: 'Group', index: 2, text: 'Group' },\n        { name: 'Type', index: 3, text: 'Type' },\n        { name: 'RefSeq', index: 4, text: 'RefSeq' },\n        { name: 'INSDC', index: 5, text: 'INSDC' },\n        { name: 'Size', index: 6, text: 'Size (Kb)' },\n        { name: 'GC', index: 7, text: 'GC%' },\n        { name: 'Protein', index: 8, text: 'Protein' },\n        { name: 'rRNA', index: 9, text: 'rRNA' },\n        { name: 'tRNA', index: 10, text: 'tRNA' },\n        { name: 'oRNA', index: 11, text: 'Other RNA' },\n        { name: 'Gene', index: 12, text: 'Gene' },\n        { name: 'Pseudogene', index: 13, text: 'Pseudogene' },\n        { name: 'RDate', index: 14, text: 'Release Date' },\n        { name: 'MDate', index: 15, text: 'Modify Date' }\n    ];\n\n    let option = {\n        //animation: false,\n        backgroundColor: backColor,\n        brush: {\n            brushLink: 'all',\n            throttleType: 'debounce',\n            xAxisIndex: [],\n            yAxisIndex: [],\n            inBrush: {\n                opacity: 1\n            },\n            outOfBrush: {\n                opacity: 0.2\n            }\n        },\n        toolbox: {\n            showTitle: false,\n            feature: {\n                saveAsImage: {}\n            },\n            iconStyle: {\n                normal: {\n                    borderColor: textColor,\n                    shadowColor: 'rgba(0, 0, 0, 0.5)',\n                    shadowBlur: 10\n                }\n            }\n        },\n        visualMap: [{\n            type: 'piecewise',\n            categories: [\"mtDNA\", \"Plastid DNA\", \"cpDNA\"],\n            dimension: CATEGORY_DIM,\n            orient: 'horizontal',\n            top: 0,\n            left: 'center',\n            textStyle: {\n                color: textColor,\n                fontSize: 16\n            },\n            inRange: {\n                color: colorRange,\n            },\n            outOfRange: {\n                color: disableColor,\n            },\n            controller: {\n                inRange: {\n                    symbol: 'circle'\n                },\n                outOfRange: {\n                    symbol: 'circle'\n                }\n            },\n            //seriesIndex: [0] // all\n        }, {\n            type: 'piecewise',\n            top: 20,\n            left: 0,\n            dimension: 2,\n            categories: ['Animals', 'Fungi', 'Plants', 'Protists', 'Other'],\n            textStyle: {\n                color: textColor\n            },\n            inRange: {\n            },\n            outOfRange: {\n                color: ['rgba(255,255,255,.05)', 'rgba(255,255,255,.05)', 'rgba(255,255,255,.05)', 'rgba(255,255,255,.05)', 'rgba(255,255,255,.05)']\n            },\n            controller: {\n                inRange: {\n                    symbol: \"path://M512 976.7424c-256.67072 0-464.7424-208.07168-464.7424-464.73728C47.2576 255.32928 255.32928 47.2576 512 47.2576s464.7424 208.07168 464.7424 464.7424c0 256.67072-208.07168 464.7424-464.7424 464.7424z m225.41312-754.26816c-161.65888 106.2144-264.18176 424.86272-264.18176 424.86272L410.14272 490.54208l-130.11968 101.16096c55.20896 25.28768 134.0672 106.2144 201.09312 212.4288 47.31392-111.26784 193.20832-338.87744 264.18176-359.11168-27.5968-80.9216-11.82208-146.67776-7.8848-222.54592z m0 0\",\n                    color: '#ffffff'\n                },\n                outOfRange: {\n                    color: disableColor\n                }\n            }\n        }],\n        tooltip: {\n            trigger: 'item',\n            formatter: function (obj) {\n                let value = obj.value;\n                return '<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 18px;padding-bottom: 7px;margin-bottom: 7px\">'\n                    + value[CATEGORY_DIM] + ': ' + value[CATEGORY_DIM + 3] + '(' + value[CATEGORY_DIM + 4] + ')'\n                    + '</div>'\n                    + 'X (' + schema[value[CATEGORY_DIM + 1]].text + ') ：' + value[0] + '<br>'\n                    + 'Y (' + schema[value[CATEGORY_DIM + 2]].text + ') ：' + value[1] + '<br>'\n                    + schema[2].text + ' ：' + value[2] + '<br>';\n            }\n        },\n        parallelAxis: [\n            { dim: 6, name: schema[6].text },\n            { dim: 7, name: schema[7].text },\n            { dim: 8, name: schema[8].text },\n            { dim: 9, name: schema[9].text },\n            { dim: 10, name: schema[10].text },\n            { dim: 11, name: schema[11].text },\n            { dim: 12, name: schema[12].text },\n            { dim: 13, name: schema[13].text }\n        ],\n        parallel: {\n            bottom: '5%',\n            left: '5%',\n            height: '33%',\n            width: '50%',\n            parallelAxisDefault: {\n                type: 'value',\n                nameLocation: 'end',\n                nameRotate: -30,\n                splitNumber: 3,\n                nameTextStyle: {\n                    fontSize: 14\n                },\n                axisLine: {\n                    lineStyle: {\n                        color: lineColor\n                    }\n                },\n                axisTick: {\n                    lineStyle: {\n                        color: lineColor\n                    }\n                },\n                axisLabel: {\n                    textStyle: {\n                        color: textColor\n                    }\n                }\n            }\n        },\n        grid: [],\n        xAxis: [],\n        yAxis: [],\n        series: [\n            {\n                name: 'parallel',\n                type: 'parallel',\n                data: data,\n                smooth: true,\n                lineStyle: {\n                    normal: {\n                        width: 0.2,\n                        opacity: 0.3\n                    }\n                }\n            }\n        ]\n    };\n\n    generateGrids(option, data, schema);\n    myChart.setOption(option);\n\n    let typeOn = {\n        mtDNA: false,\n        plDNA: false,\n        cpDNA: false,\n        Animals: false,\n        Fungi: false,\n        Plants: false,\n        Protists: false,\n        Other: false\n    };\n    for (let i = 0; i < data.length; i++) {\n        if (data[i][CATEGORY_DIM] === \"mtDNA\") typeOn.mtDNA = true;\n        if (data[i][CATEGORY_DIM] === \"Plastid DNA\") typeOn.plDNA = true;\n        if (data[i][CATEGORY_DIM] === \"cpDNA\") typeOn.cpDNA = true;\n        if (data[i][2] === \"Animals\") typeOn.Animals = true;\n        if (data[i][2] === \"Fungi\") typeOn.Fungi = true;\n        if (data[i][2] === \"Plants\") typeOn.Plants = true;\n        if (data[i][2] === \"Protists\") typeOn.Protists = true;\n        if (data[i][2] === \"Other\") typeOn.Other = true;\n        if (typeOn.mtDNA === true && typeOn.plDNA === true && typeOn.cpDNA === true && typeOn.Animals === true && typeOn.Fungi === true && typeOn.Plants === true && typeOn.Protists === true && typeOn.Other === true) {\n            break;\n        }\n    }\n    myChart.dispatchAction({\n        type: 'selectDataRange',\n        selected: {\n            'mtDNA': typeOn.mtDNA,\n            'Plastid DNA': typeOn.plDNA,\n            'cpDNA': typeOn.cpDNA,\n            'Animals': typeOn.Animals,\n            'Fungi': typeOn.Fungi,\n            'Plants': typeOn.Plants,\n            'Protists': typeOn.Protists,\n            'Other': typeOn.Other\n        }\n    });\n\n    myChart.on('click', function (params) {\n        if (params.componentType === 'series') {\n            if (params.seriesType === 'scatter') {\n                // let type = \"\";\n                // switch (params.data[CATEGORY_DIM]) {\n                //     case \"mtDNA\":\n                //         type = \"mtDNA\"; break;\n                //     case \"Plastid DNA\":\n                //         type = \"plDNA\"; break;\n                //     case \"cpDNA\":\n                //         type = \"cpDNA\"; break;\n                // }\n                if (params.data[7] != '-') {\n                    window.open(\"http://bio.njfu.edu.cn/CPTree/service/cpdata.php?type=vdog&id=\" + params.data[7]);\n                }\n            }\n        }\n    });\n    myChart.on('brushselected', function (params) {\n        let brushSelected = params.batch[0].selected[0];\n        if (brushSelected.dataIndex.length > 0) {\n            let data = myChart.getOption().series[brushSelected.seriesIndex].data;\n            let typeOn = {\n                mtDNA: false,\n                plDNA: false,\n                cpDNA: false,\n                Animals: false,\n                Fungi: false,\n                Plants: false,\n                Protists: false,\n                Other: false\n            };\n            for (let i = 0, len = brushSelected.dataIndex.length; i < len; i++) {\n                if (data[brushSelected.dataIndex[i]][CATEGORY_DIM] === \"mtDNA\") typeOn.mtDNA = true;\n                if (data[brushSelected.dataIndex[i]][CATEGORY_DIM] === \"Plastid DNA\") typeOn.plDNA = true;\n                if (data[brushSelected.dataIndex[i]][CATEGORY_DIM] === \"cpDNA\") typeOn.cpDNA = true;\n                if (data[brushSelected.dataIndex[i]][2] === \"Animals\") typeOn.Animals = true;\n                if (data[brushSelected.dataIndex[i]][2] === \"Fungi\") typeOn.Fungi = true;\n                if (data[brushSelected.dataIndex[i]][2] === \"Plants\") typeOn.Plants = true;\n                if (data[brushSelected.dataIndex[i]][2] === \"Protists\") typeOn.Protists = true;\n                if (data[brushSelected.dataIndex[i]][2] === \"Other\") typeOn.Other = true;\n                if (typeOn.mtDNA === true && typeOn.plDNA === true && typeOn.cpDNA === true && typeOn.Animals === true && typeOn.Fungi === true && typeOn.Plants === true && typeOn.Protists === true && typeOn.Other === true) {\n                    break;\n                }\n            }\n            myChart.dispatchAction({\n                type: 'selectDataRange',\n                selected: {\n                    'mtDNA': typeOn.mtDNA,\n                    'Plastid DNA': typeOn.plDNA,\n                    'cpDNA': typeOn.cpDNA,\n                    'Animals': typeOn.Animals,\n                    'Fungi': typeOn.Fungi,\n                    'Plants': typeOn.Plants,\n                    'Protists': typeOn.Protists,\n                    'Other': typeOn.Other\n                }\n            });\n        }\n    });\n    if (!oldNcList) return ncList.join(\",\");\n}\n\nfunction readDataToMatrix(NCBIData, ncNumbers) {\n    let res = getNCBIValues(NCBIData, ncNumbers);\n    return res;\n}"],"sourceRoot":""}